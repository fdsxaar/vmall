apiVersion: apps/v1
kind: Deployment
metadata:
  name: vmall-backend-order-prod 
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vmall-backend-order-prod 
  template:
    metadata:
      labels:
        app: vmall-backend-order-prod 
    spec:
      #Connecting SQL instance from Google Kubernetes Engine has two ways
      #: workload identity or a service account key file. Here, use workload identity
      #but the second can also works well, only umcomment related config below.
      serviceAccountName: vmall-db-ksa
      containers:
      - name: vmall-backend-order
        image: fdsxaar/vmall-order-backend
        volumeMounts:
        - name: vmall-order-log-volume
          mountPath: /vmall-log/order-log
        - name : vmall-order-heap-dump-volume
          mountPath: /vmall-log/heap-dump

        ports: 
        - containerPort: 8080 
        env:
        - name: VMALL_DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: vmall-db-secret
              key: username
        - name: VMALL_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: vmall-db-secret
              key: password
        - name: VMALL_DB_NAME
          valueFrom:
            secretKeyRef:
              name: vmall-db-secret
              key: database
        - name: VMALL_DB_HOST
          valueFrom:
            secretKeyRef:
              name: vmall-db-secret
              key: mysql_host
        - name: VMALL_DB_PORT
          valueFrom:
            secretKeyRef:
              name: vmall-db-secret
              key: mysql_port 
            
        #Redis load balancer proxy ip 
        - name: VMALL_REDIS_HOST
          valueFrom:
            secretKeyRef:
              name: vmall-db-secret
              key: redis_host
        #master node's port 6380, can execute write command 
        #port 6389 is to execute read command. 
        - name: VMALL_REDIS_PORT
          valueFrom:
            secretKeyRef:
              name: vmall-db-secret
              key: redis_port 

      # sidecar cloud-sql-proxy
      - name: cloud-sql-proxy
        image: gcr.io/cloudsql-docker/gce-proxy:1.17
        env:
        - name: VMALL_DB_PORT
          valueFrom:
            secretKeyRef:
              name: vmall-db-secret
              key: mysql_port 
        - name: VMALL_DB_INSTANCE_CONNECTION_NAME
          valueFrom:
            secretKeyRef:
              name: vmall-db-secret
              key: mysql_instance_connection_name 

        command:
          - "/cloud_sql_proxy"

          # If connecting from a VPC-native GKE cluster, you can use the
          # following flag to have the proxy connect over private IP
          # - "-ip_address_types=PRIVATE"

          # Replace DB_PORT with the port the proxy should listen on
          # Defaults: MySQL: 3306, Postgres: 5432, SQLServer: 1433
        
          - "-instances=$(VMALL_DB_INSTANCE_CONNECTION_NAME)=tcp:$(VMALL_DB_PORT)"
          #if use service account key file to connect sql instance, uncomment the line below,
          #of course,must create key and then mount it like below.
          #- "-credential_file=/secrets/service_account.json"
          
        securityContext:
          # The default Cloud SQL proxy image runs as the
          # "nonroot" user and group (uid: 65532) by default.
          runAsNonRoot: true
        volumeMounts:
        - name: vmall-db-secret-sa-volume
          mountPath: /secrets/
          readOnly: true

      volumes:
      - name: vmall-db-secret-sa-volume
        secret:
          secretName: vmall-db-secret-sa 
      - name: vmall-order-log-volume
        persistentVolumeClaim:
          claimName: vmall-backend-order-prod-log-pvc
      - name: vmall-order-heap-dump-volume
        persistentVolumeClaim:
          claimName: vmall-backend-order-prod-heap-dump-pvc    
